
Client->Controller: POST: /stacks/{id}/cluster
Controller->AmbariClusterService: create
AmbariClusterService->Repository: save
Repository-->AmbariClusterService: save
AmbariClusterService->ClusterRequestHandler: notify(CLUSTER_REQUESTED)
AmbariClusterService-->Controller: create
ClusterRequestHandler->Repository: update(requested=true)
Repository-->ClusterRequestHandler: update
Controller-->Client: {id}

opt stack.status == CREATE_COMPLETED
    ClusterRequestHandler->AmbariClusterInstaller: install
    AmbariClusterInstaller->AmbariClient: addBlueprint(blueprint)
    AmbariClient-->AmbariClusterInstaller: addBlueprint
    loop until hosts.size==stack.nodeCount
        AmbariClusterInstaller->AmbariClient: getHostNames()
        AmbariClient-->AmbariClusterInstaller: hosts
    end
AmbariClusterInstaller->AmbariClient: recommendAssignments
AmbariClient-->AmbariClusterInstaller: Map<hostGroup,List<host>>
    AmbariClusterInstaller->AmbariClient: createCluster(blueprint, assignments)
    AmbariClient->AmbariClusterInstaller: createCluster
    loop until progress==100.0
        AmbariClusterInstaller->AmbariClient: getInstallProgress
        AmbariClient-->AmbariClusterInstaller: progress
    end
    AmbariClusterInstaller->ClusterCreationSuccessHandler: notify(CREATE_COMPLETE)
    ClusterCreationSuccessHandler->Repository: update(CREATE_COMPLETE)
    Repository->ClusterCreationSuccessHandler: update
end
